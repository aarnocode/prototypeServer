{"version":3,"sources":["components/Game/Game.js","components/Screen/Screen.js","components/Token/Token.js","components/Notification/Notification.js","firebase.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Game","props","useState","message","setMessage","guess","setGuess","restart","setRestart","hidden","isVisible","className","type","maxLength","onChange","num","enteredNumber","target","value","test","onClick","number","navigator","serviceWorker","getRegistration","then","registration","showNotification","body","generate","Screen","setNum","btnStart","setBtnStart","gameState","setGameState","generateNumber","Math","floor","random","Token","tkn","setTkn","btnText","setBtnText","textField","setTextField","copy","setCopy","copyMessage","setCopyMessage","onLine","clipboard","writeText","axios","post","title","topic","token","headers","resp","console","log","Notification","duration","useEffect","Toast","onClose","setShow","show","delay","autohide","animation","style","position","top","right","Header","src","alt","payload","Body","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","messaging","App","notification","setNotification","setShowNotification","getToken","data","warn","Promise","resolve","onMessage","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","window","addEventListener","register","scope","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12c57211.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Game.css\";\r\n\r\nconst Game = (props) => {\r\n    const [message, setMessage] = useState(\"What's your guess?\");\r\n    const [guess, setGuess] = useState(\"\");\r\n    const [restart, setRestart] = useState(true);\r\n\r\n    const setGuessHandler = (enteredNumber)=>{\r\n        const re = /^[0-9\\b]+$/;\r\n\r\n        if (enteredNumber === '' || re.test(enteredNumber)) {\r\n            setMessage(\"What's your guess?\");\r\n            setGuess(enteredNumber);\r\n        }\r\n        \r\n    }\r\n\r\n    const checkNumber = () => {\r\n        if(guess > props.number){\r\n            if((guess-props.number)< 5){\r\n                setMessage(\"Almost!! Guess lower\");\r\n            }else{\r\n                setMessage(\"Lower number\");\r\n            }\r\n        }else if(guess < props.number){\r\n            if((props.number - guess) < 5){\r\n                setMessage(\"You're close!! Try raising your number\");\r\n            }else{\r\n                setMessage(\"Try a higher number\");   \r\n            }\r\n        }else{\r\n            setMessage(\"You guessed it! It's \" + props.number);\r\n            setRestart(false);\r\n            navigator.serviceWorker.getRegistration(\"/\")\r\n                .then((registration)=>{\r\n                    registration.showNotification(\"Congratulations\",{\r\n                        body:\"You just guessed the number!\"\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    const restartGame = () =>{\r\n        props.generate();\r\n        setMessage(\"What's your guess?\");\r\n        setGuess(\"\");\r\n        setRestart(true);\r\n    }\r\n\r\n  return (\r\n    <div hidden={props.isVisible}>\r\n      <p>( 1 - 99 )</p>\r\n      <input className=\"input\" type=\"text\" maxLength=\"2\" onChange={num => setGuessHandler(num.target.value)} value={guess}></input>\r\n      <br />\r\n      <button className=\"button\" hidden={!restart} onClick={checkNumber}>Guess</button>\r\n      <p><strong>{message}</strong></p>\r\n      <button className=\"button\" hidden={restart} onClick={restartGame}>Play again?</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState } from 'react';\r\nimport './Screen.css';\r\nimport Game from '../Game/Game';\r\n\r\nconst Screen = () => {\r\n    const [num,setNum] = useState(0);\r\n    const [btnStart,setBtnStart] = useState(false);\r\n    const [gameState, setGameState] = useState(true);\r\n\r\n    const startGameHandler = () =>{\r\n        setBtnStart(true);\r\n        setGameState(false);\r\n        generateNumber();\r\n    }\r\n\r\n    const generateNumber = () => {\r\n        setNum(Math.floor(Math.random()*98)+1);\r\n    }\r\n\r\n    return (\r\n        <div className=\"containerNative\">\r\n            <h3>GUESS THE NUMBER</h3>\r\n            <Game \r\n                isVisible={gameState}\r\n                number={num}\r\n                generate={generateNumber}/>\r\n            <button className=\"button\" onClick={startGameHandler} hidden={btnStart}>Start Game</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Screen;","import React, { useState } from \"react\";\r\nimport \"./Token.css\";\r\nimport axios from 'axios';\r\n\r\nconst Token = (props) => {\r\n  const [tkn,setTkn] = useState(\"\");\r\n  const [btnText, setBtnText] = useState(\"Show Firebase Token\");\r\n  const [textField, setTextField] = useState(true);\r\n  const [copy, setCopy] = useState(true);\r\n  const [copyMessage, setCopyMessage] = useState(true);\r\n  const showTextField = () => {\r\n    if (textField === true) {\r\n      if(!navigator.onLine){\r\n        setTkn(\"You are offline, cannot generate firebase token.\");\r\n      }else{\r\n        setTkn(props.tkn);\r\n      }\r\n      setBtnText(\"Hide Firebase Token\");\r\n      setTextField(false);\r\n      setCopy(false);\r\n    } else {\r\n      setBtnText(\"Show Firebase Token\");\r\n      setTextField(true);\r\n      setCopy(true);\r\n      setCopyMessage(true);\r\n    }\r\n  };\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(props.tkn);\r\n    setCopyMessage(false);\r\n  };\r\n\r\n  const sendPush = () =>{\r\n   \r\n    axios.post(\"https://prototypepushserver.herokuapp.com/push/user\",\r\n    {\r\n      title:\"Hello there!\",\r\n      message:\"I've been requested from reactjs\",\r\n      topic:\"\",\r\n      token:tkn\r\n    },{\r\n      headers:{\r\n        \"Content-Type\":\"application/json\"\r\n      }\r\n    }\r\n    ).then((resp)=>{\r\n      console.log(resp);\r\n    }).then((resp)=>{\r\n      console.log(resp);\r\n    })\r\n    // axios.get(\"http://localhost:8080/send\").then((resp)=>{\r\n    //   console.log(resp);\r\n    // });\r\n  }\r\n  return (\r\n    <div>\r\n      <button className=\"button\" onClick={showTextField}>{btnText}</button>\r\n      <br />\r\n      <textarea className=\"textarea\" hidden={textField} value={tkn}></textarea>\r\n      <br />\r\n      <p className=\"warn\" hidden={copyMessage}>\r\n        Successfully copied!\r\n      </p>\r\n      <br />\r\n      <button className=\"button\" hidden={copy} onClick={copyToClipboard}>\r\n        Copy\r\n      </button>\r\n      <button className=\"button\" hidden={copy} onClick={sendPush}>Push Notif</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Token;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Toast } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import './Notification.css';\r\n\r\nconst Notification = (props) =>{\r\n    const [seconds,setSeconds] = useState(0);\r\n    const [duration, setDuration] = useState(\"just now\");\r\n    const setSecondsHandler = () =>{\r\n        // I DONT KNOW WHY THE NUMBERS NEEDS TO BE LIKE THIS. \r\n        // SEEMS LIKE THE INTERVAL ms DOESNT WORK\r\n        const current = seconds;\r\n        setSeconds(current+1);\r\n        if(seconds<60000){\r\n            setDuration(\"just now\");\r\n        }else if(seconds >= 60000){\r\n            if(seconds >= 3600000){\r\n                setDuration(Math.floor(seconds/3600000) + \" hr ago\");\r\n            }else{\r\n                setDuration(Math.floor(seconds/60000) + \" mins ago\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const closeNotification = () => {\r\n        setSeconds(0);\r\n        props.setShow(false);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        // let myInterval = setInterval(setSecondsHandler(),1000);\r\n        // return ()=> {\r\n        //     clearInterval(myInterval);\r\n        //   };\r\n    })\r\n\r\n    \r\n    return(\r\n        <Toast onClose={() => props.setShow(false)} show={props.show} delay={5000} autohide animation style={{\r\n            position: 'absolute',\r\n            top: 20,\r\n            right: 20,\r\n          }}>\r\n            <Toast.Header>\r\n              <img\r\n                src=\"holder.js/20x20?text=%20\"\r\n                className=\"rounded mr-2\"\r\n                alt=\"\"\r\n              />\r\n              <strong className=\"mr-auto\">{props.payload.title}</strong>\r\n              <small>{duration}</small>\r\n            </Toast.Header>\r\n            <Toast.Body>{props.payload.body}</Toast.Body>\r\n          </Toast>\r\n    )\r\n}\r\n\r\nexport default Notification;","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCPNhBH4P3wTs05G-FoDi-RUR2RsM2ZG8A\",\r\n  authDomain: \"prototype-app-2ce47.firebaseapp.com\",\r\n  projectId: \"prototype-app-2ce47\",\r\n  storageBucket: \"prototype-app-2ce47.appspot.com\",\r\n  messagingSenderId: \"1054726933042\",\r\n  appId: \"1:1054726933042:web:a66b173a713db950dc4a2b\",\r\n  measurementId: \"G-XE02ZTB1JV\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nconsole.log(firebase.messaging);\r\nexport const onMessageListener = () => \r\n  new Promise((resolve)=>{\r\n    firebase.messaging().onMessage((payload)=>{\r\n      resolve(payload);\r\n    })\r\n  });\r\nexport default firebase;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Screen from './components/Screen/Screen';\nimport Token from './components/Token/Token';\nimport Notification from './components/Notification/Notification'\nimport firebase, { onMessageListener } from \"./firebase\";\n\nfunction App() {\n  const [notification,setNotification] = useState({title:\"\",body:\"\"})\n  const [showNotification, setShowNotification] = useState(false);\n  const [tkn,setTkn] = useState(\"\");\n  useEffect(() => {\n    const message = firebase.messaging();\n    return message.getToken().then((data) => {\n      console.warn(\"token\", data);\n      setTkn(data);\n    });\n  });\n\n  onMessageListener().then((payload)=>{\n    setShowNotification(true);\n    setNotification({\n      title:payload.notification.title,\n      body:payload.notification.body\n    })\n    console.log(payload);\n  }).catch(err => console.log('failed', err));\n\n  return (\n    <div className=\"App\">\n      <Screen />\n      <Token tkn={tkn}/>\n      <Notification show={showNotification} setShow={setShowNotification} payload={notification} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const register = function () {\r\n  if (\"serviceWorker\" in navigator) {\r\n    window.addEventListener(\"load\", function () {\r\n      navigator.serviceWorker\r\n        .register(\"serviceWorker.js\")\r\n        .then(\r\n          function (registration) {\r\n            console.log(\"Worker registration successful\", registration.scope);\r\n            // return registration.pushManager\r\n            //   .getSubscription()\r\n            //   .then(function (subscription) {\r\n            //     return registration.pushManager.subscribe({\r\n            //       userVisibleOnly: true,\r\n            //       applicationServerKey: determineAppServerKey(),\r\n            //     });\r\n            //   });\r\n          },\r\n          function (err) {\r\n            console.log(\"Worker registration failed\", err);\r\n          }\r\n        )\r\n        .catch(function (err) {\r\n          console.log(err);\r\n        });\r\n    });\r\n  } else {\r\n    console.log(\"Service Worker is not supported by browser.\");\r\n  }\r\n\r\n  function urlBase64ToUint8Array(base64String) {\r\n    const padding = \"=\".repeat((4 - (base64String.length % 4)) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, \"+\")\r\n      .replace(/_/g, \"/\");\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; i++) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\n  function determineAppServerKey() {\r\n    var vapidPublicKey =\r\n      \"BGNOdfwjeWdCp4ox9WSCb72ObAbnKYvXzbaadJvbXiM6gAQTk34F6uK0od_3rngSFfD_-AfPgJVAnhU481ZiiSc\";\r\n    return urlBase64ToUint8Array(vapidPublicKey);\r\n  }\r\n};\r\n\r\nexport default register;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport register from './serviceWorkerRegistration';\nregister();\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}